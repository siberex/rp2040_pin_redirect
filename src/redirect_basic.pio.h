// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------------- //
// gpio_redirect_basic //
// ------------------- //

#define gpio_redirect_basic_wrap_target 0
#define gpio_redirect_basic_wrap 1
#define gpio_redirect_basic_pio_version 0

static const uint16_t gpio_redirect_basic_program_instructions[] = {
            //     .wrap_target
    0x4001, //  0: in     pins, 1
    0xa006, //  1: mov    pins, isr
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program gpio_redirect_basic_program = {
    .instructions = gpio_redirect_basic_program_instructions,
    .length = 2,
    .origin = -1,
    .pio_version = gpio_redirect_basic_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config gpio_redirect_basic_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + gpio_redirect_basic_wrap_target, offset + gpio_redirect_basic_wrap);
    return c;
}

#include "hardware/clocks.h"
// Function to initialize and run the PIO program
void gpio_redirect_basic_program_init(PIO pio, uint sm, uint offset, uint in_pin, uint out_pin) {
    // Configure the PIO state machine
    pio_sm_config cfg = gpio_redirect_basic_program_get_default_config(offset);
    // --- Input Pin Configuration ---
    pio_gpio_init(pio, in_pin);
    sm_config_set_in_pins(&cfg, in_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, in_pin, 1, false); // Set as input
    // --- Output Pin Configuration ---
    pio_gpio_init(pio, out_pin);
    sm_config_set_out_pins(&cfg, out_pin, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin, 1, true); // Set as output
    // Set clock divider
    sm_config_set_clkdiv(&cfg, 1.0f); // Full speed
    // --- Load and Run ---
    // Load the program into the PIO's instruction memory
    pio_sm_init(pio, sm, offset, &cfg);
    // Enable the PIO state machine
    pio_sm_set_enabled(pio, sm, true);
}

#endif

