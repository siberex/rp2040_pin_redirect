; Redirect one pin input to some other pin output.

.pio_version 0 // Does not require PIO version 1 (RP2350)
.program gpio_redirect_basic

.wrap_target
    in pins, 1          ; Intake 1 bit from the input-mapped pin(s) and put it to the ISR
    mov pins, isr       ; Move data from the ISR to the output-mapped pin(s)
.wrap   ; This is a free (0-cycle) unconditional jump.
        ; Note: wrap registers are set up by program_get_default_config()

% c-sdk {
#include "hardware/clocks.h"

// Function to initialize and run the PIO program
void gpio_redirect_basic_program_init(PIO pio, uint sm, uint offset, uint in_pin, uint out_pin) {
    // Configure the PIO state machine
    pio_sm_config cfg = gpio_redirect_basic_program_get_default_config(offset);

    // --- Input Pin Configuration ---
    pio_gpio_init(pio, in_pin);
    sm_config_set_in_pins(&cfg, in_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, in_pin, 1, false); // Set as input

    // --- Output Pin Configuration ---
    pio_gpio_init(pio, out_pin);
    sm_config_set_out_pins(&cfg, out_pin, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin, 1, true); // Set as output

    // Set clock divider
    sm_config_set_clkdiv(&cfg, 1.0f); // Full speed

    // --- Load and Run ---
    // Load the program into the PIO's instruction memory
    pio_sm_init(pio, sm, offset, &cfg);
    // Enable the PIO state machine
    pio_sm_set_enabled(pio, sm, true);
}

%}