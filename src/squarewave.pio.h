// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// squarewave //
// ---------- //

#define squarewave_wrap_target 1
#define squarewave_wrap 2
#define squarewave_pio_version 0

static const uint16_t squarewave_program_instructions[] = {
    0xe081, //  0: set    pindirs, 1
            //     .wrap_target
    0xe001, //  1: set    pins, 1
    0xe000, //  2: set    pins, 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program squarewave_program = {
    .instructions = squarewave_program_instructions,
    .length = 3,
    .origin = -1,
    .pio_version = squarewave_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config squarewave_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + squarewave_wrap_target, offset + squarewave_wrap);
    return c;
}

#include "hardware/clocks.h"
// Function to initialize and run the PIO program
void squarewave_program_init(PIO pio, uint sm, uint offset, uint out_pin, float clock_div) {
    // Configure the PIO state machine
    pio_sm_config cfg = squarewave_program_get_default_config(offset);
    // --- Output Pin Configuration ---
    pio_gpio_init(pio, out_pin);
    sm_config_set_set_pins(&cfg, out_pin, 1); // "Set" mapping
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin, 1, true); // Set as output
    // Set clock divider
    sm_config_set_clkdiv(&cfg, clock_div);
    // --- Load and Run ---
    // Load the program into the PIO's instruction memory
    pio_sm_init(pio, sm, offset, &cfg);
    // Enable the PIO state machine
    pio_sm_set_enabled(pio, sm, true);
}

#endif

